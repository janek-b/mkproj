#!/usr/bin/env bash

atomcfg() {
	local settings=("scrollPastEnd: true" "showIndentGuide: true" "showInvisibles: true" "softWrap: true")
	for s in "${settings[@]}"; do
		grep -q -e "$s" ~/.atom/config.cson || sed ' s/editor:/&\
    '"$s"'/
		' ~/.atom/config.cson >> ~/.atom/tmpconfig.cson
	done
	mv ~/.atom/tmpconfig.cson ~/.atom/config.cson
}

toCamelCase() {
	local dash=$1
	local arr=(${dash//-/ })
	local word
	for s in ${arr[@]}; do
		word="$word$(tr '[:lower:]' '[:upper:]' <<< ${s:0:1})${s:1}"
	done
	echo $word
}

toDashSeperated() {
	local camel=$1
	echo $(echo "$camel" | sed 's/\(.\)\([A-Z]\)/\1-\2/g' | tr '[:upper:]' '[:lower:]')
}

mkproj() {
	usage() {
		local prog=${0##*/}
		cat <<-EOF

		  usage: $prog [-ha] <ProjectName> <ClassName> <ClassNameTwo>

		  creates initial files and directories for a new java project,
		  populates files with initial boilerplate,
		  initializes git with pairs,
		  adds useful aliases to simplify repetative tasks

		  examples

		    # $prog NewJavaProject JavaClass OtherJavaClass
		    create new java project directory and populate initial files

		  options

		    -h             print this message and exit
		    -a             working alone, will not use git pair-commit.

		EOF
	}

	# Declare local variables
	local projname
	local dirname
	local basedir
	local projdir
	local user1
	local user1full
	local user1email
	local user2
	local user2full
	local user2email
	local users

	local alone=false
	local OPTIND opt
	while getopts ':h:a:' opt; do
		projname="${OPTARG}"
		case $opt in
			h) usage; return 0;;
			a) alone=true;;
			*) usage; return 1;;
		esac
	done
	shift $((OPTIND - 1))

	if [[ $alone == false ]]; then
		projname=$1
		shift
	fi

	if [[ -z $projname ]]; then
		echo "error: no project name given" >&2
		echo "Enter the name of your project in UpperCamelCase"
		read projname
	fi

	if [[ $projname == *"-"* ]]; then
		dirname=$(echo "$projname" | awk '{print tolower($0)}')
	else
		dirname=$(toDashSeperated $projname)
	fi

	if [[ -n $EPICODUS_DIR ]]; then
		basedir=${EPICODUS_DIR}
	else
		basedir=~/Desktop
	fi

	projdir=$basedir/$dirname

	if $alone; then
		users=$(cat ~/.gitconfig | sed -n -e 's/^.name = //p')
	else
		if [[ -f ~/.pairs ]]; then
			user1=$(awk -F ': ' '{if(NR==2) print $1}' ~/.pairs)
			user2=$(awk -F ': ' '{if(NR==3) print $1}' ~/.pairs)
			user1full=$(awk -F ': ' '{if(NR==2) print $2}' ~/.pairs)
			user2full=$(awk -F ': ' '{if(NR==3) print $2}' ~/.pairs)
			users="$user1full and $user2full"
		else
			echo "No .pairs file was found. Enter information to generate one"
			echo "Enter first persons full name"
			read user1full
			echo "Enter first persons email"
			read user1email
			echo "Enter second persons full name"
			read user2full
			echo "Enter second persons email"
			read user2email
			users="$user1full and $user2full"
			user1=$(echo $user1full | awk '{print tolower($1), tolower($2)}' | sed 's/ *\([^ ]\)[^ ]\{1,\} */\1/g')
			user2=$(echo $user2full | awk '{print tolower($1), tolower($2)}' | sed 's/ *\([^ ]\)[^ ]\{1,\} */\1/g')
			cat >~/.pairs <<-END
			pairs:
			  ${user1}: ${user1full}
			  ${user2}: ${user2full}
			email:
			  ${user1}: ${user1email}
			  ${user2}: ${user2email}
			END
		fi
	fi

	# cancel if directory already exists
	if [[ -d $projdir ]]; then
		echo "error: directory $projdir already exists" >&2
		usage; return 1
	fi


	# make directories
	mkdir -p $projdir/js $projdir/scss
	cd "$projdir"
	# create and populate files
	# static files

	# .gitignore file
	curl -s https://raw.githubusercontent.com/janek-b/mkproj/js/templates/gitignore -o $projdir/.gitignore

	# gulpfile.js
	curl -s https://raw.githubusercontent.com/janek-b/mkproj/js/templates/gulpfile.js -o $projdir/gulpfile.js

	# dynamic files

	# index.html
	cat >$projdir/index.html <<-END
	<!DOCTYPE html>
	<html>
	  <head>
	    <link rel="stylesheet" href="build/css/vendor.css">
	    <script src="build/js/vendor.min.js"></script>
	    <script type="text/javascript" src="build/js/app.js"></script>
	    <title>${projname}</title>
	  </head>
	  <body>

	  </body>
	</html>
	END

	# packages.json
	cat >$projdir/package.json <<-END
	{
	  "name": "$(toCamelCase $projname | awk '{print tolower($0)}')",
	  "version": "1.0.0",
	  "description": "",
	  "main": "index.js",
	  "scripts": {
	    "test": "echo \"Error: no test specified\" && exit 1"
	  },
	  "author": "${users}",
	  "license": "ISC",
	  "devDependencies": {
	    "bower-files": "^3.14.1",
	    "browser-sync": "^2.18.8",
	    "browserify": "^14.3.0",
	    "del": "^2.2.2",
	    "gulp": "^3.9.1",
	    "gulp-concat": "^2.6.1",
	    "gulp-jshint": "^2.0.4",
	    "gulp-uglify": "^2.1.2",
	    "gulp-util": "^3.0.8",
	    "jshint": "^2.9.4",
	    "vinyl-source-stream": "^1.1.0"
	  }
	}
	END

	# bower.json
	cat >$projdir/bower.json <<-END
	{
	  "name": "$(toCamelCase $projname | awk '{print tolower($0)}')",
	  "description": "",
	  "main": "index.js",
	  "license": "ISC",
	  "homepage": "",
	  "ignore": [
	    "**/.*",
	    "node_modules",
	    "bower_components",
	    "test",
	    "tests"
	  ],
	  "dependencies": {
	    "jquery": "^3.2.1",
	    "bootstrap": "^3.3.7",
	    "moment": "^2.18.1"
	  }
	}
	END

	# README.md
	cat >$projdir/README.md <<-END
	# _${projname}_

	#### _${projname}, $(date +%m-%d-%Y)_

	#### By _**${users}**_

	## Description
	_Example text for the description of the project_


	## Specifications

	| Behavior                   | Input Example     | Output Example    |
	| -------------------------- | -----------------:| -----------------:|



	## Setup/Installation Requirements

	* _Clone the repository_
	* _Run the following commands_
	\`\`\`
	npm install
	bower install
	gulp build
	gulp serve
	\`\`\`

	### License

	Copyright (c) $(date +%Y) **_${users}_**

	This software is licensed under the MIT license.
	END

	# Initalize git and make first commit
	npm install
	bower install

	git init
	git add .
	if $alone; then
		git commit -m "add initial project directories and files"
	else
		git pair $user1 $user2
		git pair-commit -m "add initial project directories and files"
	fi

	atomcfg
	atom .
}

alias gpc='git pair-commit'

export CLICOLOR=1
alias ll='ls -alh'
bind 'set completion-ignore-case on'
